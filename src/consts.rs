pub const DIFF_MAT_FLOYD_STEINBERG: [((i32, i32), f32); 4] = [
    ((1, 0), 7f32 / 16f32),
    ((-1, 1), 3f32 / 16f32),
    ((0, 1), 5f32 / 16f32),
    ((1, 1), 1f32 / 16f32),
]; //

pub const DIFF_MAT_JARVIS_JUDICE_NINKE: [((i32, i32), f32); 12] = [
    ((1, 0), 7f32 / 48f32), ((2, 0), 5f32 / 48f32),
    ((-2, 1), 3f32 / 48f32), ((-1, 1), 5f32 / 48f32), ((0, 1), 7f32 / 48f32), ((1, 1), 5f32 / 48f32), ((2, 1), 3f32 / 48f32),
    ((-2, 2), 1f32 / 48f32), ((-1, 2), 3f32 / 48f32), ((0, 2), 5f32 / 48f32), ((1, 2), 3f32 / 48f32), ((2, 2), 1f32 / 48f32),
]; //


pub const DIFF_MAT_SIERRA: [((i32, i32), f32); 10] = [
    ((1, 0), 5f32 / 32f32), ((2, 0), 3f32 / 32f32),
    ((-2, 1), 2f32 / 32f32), ((-1, 1), 4f32 / 32f32), ((0, 1), 5f32 / 32f32), ((1, 1), 4f32 / 32f32), ((2, 1), 2f32 / 32f32),
    ((-1, 2), 2f32 / 32f32), ((0, 2), 3f32 / 32f32), ((1, 2), 2f32 / 32f32),
]; //

pub const DIFF_MAT_ATKINSON: [((i32, i32), f32); 6] = [
    ((1, 0), 1f32 / 8f32), ((2, 0), 1f32 / 8f32),
    ((-1, 1), 1f32 / 8f32), ((0, 1), 1f32 / 8f32), ((1, 1), 1f32 / 8f32),
    ((0, 2), 1f32 / 8f32),
]; //

pub const DIFF_MAT_STUCKI: [((i32, i32), f32); 12] = [
    ((1, 0), 8f32 / 42f32), ((2, 0), 4f32 / 42f32),
    ((-2, 1), 2f32 / 42f32), ((-1, 1), 4f32 / 42f32), ((0, 1), 8f32 / 42f32), ((1, 1), 4f32 / 42f32), ((2, 1), 2f32 / 42f32),
    ((-2, 2), 1f32 / 42f32), ((-1, 2), 2f32 / 42f32), ((0, 2), 4f32 / 42f32), ((1, 2), 2f32 / 42f32), ((2, 2), 1.0 / 42f32),
]; //


pub const DIFF_MAT_BURKES: [((i32, i32), f32); 7] = [
    ((1, 0), 8f32 / 32f32), ((2, 0), 4f32 / 32f32),
    ((-2, 1), 2f32 / 32f32), ((-1, 1), 4f32 / 32f32), ((0, 1), 8f32 / 32f32), ((1, 1), 4f32 / 32f32), ((2, 1), 2f32 / 32f32),
]; //

pub const DIFF_MAT_STEVENSON_ARCE: [((i32, i32), f32); 21] = [
    ((2, 0), 32f32 / 200f32), ((3, 0), 12f32 / 200f32), ((-3, 1), 1f32 / 200f32), ((-1, 1), 26f32 / 200f32),
    ((0, 1), 30f32 / 200f32), ((1, 1), 16f32 / 200f32), ((2, 1), 26f32 / 200f32), ((3, 1), 1f32 / 200f32),
    ((-2, 2), 12f32 / 200f32), ((-1, 2), 26f32 / 200f32), ((0, 2), 30f32 / 200f32), ((1, 2), 16f32 / 200f32), ((2, 2), 12f32 / 200f32),
    ((-3, 3), 1f32 / 200f32), ((-1, 3), 26f32 / 200f32), ((0, 3), 30f32 / 200f32), ((1, 3), 16f32 / 200f32), ((3, 3), 1f32 / 200f32),
    ((-2, 4), 12f32 / 200f32), ((0, 4), 32f32 / 200f32), ((2, 4), 12f32 / 200f32),
]; //

pub const DIFF_MAT_TWO_ROW_SIERRA: [((i32, i32), f32); 7] = [
    ((1, 0), 4f32 / 16f32), ((2, 0), 3f32 / 16f32),
    ((-2, 1), 1f32 / 16f32), ((-1, 1), 2f32 / 16f32), ((0, 1), 3f32 / 16f32), ((1, 1), 2f32 / 16f32), ((2, 1), 1f32 / 16f32),
]; //

pub const DIFF_MAT_SIERRA_LITE: [((i32, i32), f32); 3] = [
    ((1, 0), 2f32 / 4f32),
    ((-1, 1), 1f32 / 4f32), ((0, 1), 1f32 / 4f32),
]; //

pub const DIFF_MAT_FAN: [((i32, i32), f32); 7] = [
    ((1, 0), 1f32 / 16f32), ((2, 0), 1f32 / 16f32),
    ((-1, 1), 1f32 / 16f32), ((0, 1), 1f32 / 16f32), ((1, 1), 1f32 / 16f32), ((2, 1), 1f32 / 16f32),
    ((0, 2), 1f32 / 16f32),
]; //

/*pub const DIFF_MAT_SHIAU_FAN: Vec<((i32, i32), f32)> = vec![
        ((1, 0), 1f32 / 16f32), ((2, 0), 1f32 / 16f32),
        ((-1, 1), 1f32 / 16f32), ((0, 1), 1f32 / 16f32), ((1, 1), 1f32 / 16f32), ((2, 1), 1f32 / 16f32),
        ((-1, 2), 1f32 / 16f32), ((0, 2), 1f32 / 16f32), ((1, 2), 1f32 / 16f32),
    ];*/ //wtf is this

pub const DIFF_MAT_K3M: [((i32, i32), f32); 7] = [
    ((1, 0), 5f32 / 16f32), ((2, 0), 3f32 / 16f32),
    ((-2, 1), 1f32 / 16f32), ((-1, 1), 3f32 / 16f32), ((0, 1), 5f32 / 16f32), ((1, 1), 3f32 / 16f32), ((2, 1), 1f32 / 16f32),
];

pub const DIFF_MAT_LI_WAN: [((i32, i32), f32); 2] = [
    ((1, 0), 1f32 / 2f32),
    ((0, 1), 1f32 / 2f32),
];

pub const DIFF_MAT_PJARRI: [((i32, i32), f32); 4] = [
    ((1, 0), 5.0 / 16.0),
    ((-1, 1), 3.0 / 16.0), ((0, 1), 7.0 / 16.0), ((1, 1), 1.0 / 16.0),
];

pub const DIFF_MAT_SHIAU_FAN: [((i32, i32), f32); 3] = [
    ((1, 0), 4.0 / 8.0),
    ((-1, 1), 1.0 / 8.0), ((0, 1), 3.0 / 8.0),
];

pub const DIFF_MAT_IMPROVED_STUCKI: [((i32, i32), f32); 12] = [
    ((1, 0), 8.0 / 42.0), ((2, 0), 4.0 / 42.0),
    ((-2, 1), 2.0 / 42.0), ((-1, 1), 4.0 / 42.0), ((0, 1), 8.0 / 42.0), ((1, 1), 4.0 / 42.0), ((2, 1), 2.0 / 42.0),
    ((-2, 2), 1.0 / 42.0), ((-1, 2), 2.0 / 42.0), ((0, 2), 4.0 / 42.0), ((1, 2), 2.0 / 42.0), ((2, 2), 1.0 / 42.0),
];